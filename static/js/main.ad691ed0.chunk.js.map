{"version":3,"sources":["logo.svg","components/Animal/index.js","Utils/API.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Animal","getAnimal","axios","get","createAnimal","animal","post","App","state","name","type","animals","handleInputChange","event","target","value","setState","handleSubmit","preventDefault","animalData","API","then","res","console","log","data","className","this","onChange","htmlFor","onClick","length","map","i","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,qKCW5BC,I,gBCTA,GACXC,UAAW,WACP,OAAOC,IAAMC,IAAI,aAGrBC,aAAc,SAAAC,GACV,OAAOH,IAAMI,KAAK,IAAKD,KC4FhBE,E,2MAzFbC,MAAQ,CACNC,KAAM,GACNC,KAAM,GACNC,QAAS,I,EAcXC,kBAAoB,SAAAC,GAAU,IAAD,EACHA,EAAMC,OAAtBL,EADmB,EACnBA,KAAMM,EADa,EACbA,MACd,EAAKC,SAAL,eACGP,EAAOM,K,EAIZE,aAAe,SAAAJ,GACbA,EAAMK,iBACN,IAAIC,EAAa,CACfV,KAAM,EAAKD,MAAMC,KACjBC,KAAM,EAAKF,MAAME,MAGnBU,EAAIhB,aAAae,GACdE,KAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZF,EAAInB,YACDoB,KAAK,SAAAC,GACJ,EAAKN,SAAS,CACZL,QAASW,EAAIG,Y,mFA/BJ,IAAD,OAClBL,EAAInB,YACDoB,KAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,MAChB,EAAKT,SAAS,CACZL,QAASW,EAAIG,W,+BAoCnB,OACE,yBAAKC,UAAU,aACb,gEACA,8BACE,2BAAOjB,KAAK,OAAOM,MAAOY,KAAKnB,MAAMC,KAAMmB,SAAUD,KAAKf,kBAAmBF,KAAK,SAClF,2BAAOmB,QAAQ,QAAf,QACA,2BAAOpB,KAAK,OAAOM,MAAOY,KAAKnB,MAAME,KAAMkB,SAAUD,KAAKf,kBAAmBF,KAAK,SAClF,2BAAOmB,QAAQ,QAAf,QACA,6BACA,6BACA,4BAAQH,UAAU,MAAMhB,KAAK,SAASoB,QAASH,KAAKV,cAApD,UAGF,6BACE,uCACA,+BACE,+BACE,oCACA,oCAEEU,KAAKnB,MAAMG,QAAQoB,OACnBJ,KAAKnB,MAAMG,QAAQqB,IAAI,SAAC3B,EAAQ4B,GAAT,OACrB,wBAAIC,IAAKD,GACP,4BAAK5B,EAAOI,MACZ,4BAAKJ,EAAOK,SAGX,qB,GA5EHyB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.ad691ed0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\n\r\nfunction Animal(props) {\r\n    return (\r\n        <div className=\"card\">\r\n            <h5>{props.name}</h5>\r\n            <h5>{props.type}</h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Animal","import axios from 'axios'\r\n\r\nexport default {\r\n    getAnimal: function () {\r\n        return axios.get('/animals')\r\n    },\r\n\r\n    createAnimal: animal => {\r\n        return axios.post(\"/\", animal)\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n// Components\r\nimport Animal from './components/Animal'\r\n\r\nimport API from './Utils/API'\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    name: '',\r\n    type: '',\r\n    animals: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    API.getAnimal()\r\n      .then(res => {\r\n        console.log(res.data)\r\n        this.setState({\r\n          animals: res.data\r\n        })\r\n      })\r\n  }\r\n\r\n\r\n  handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    var animalData = {\r\n      name: this.state.name,\r\n      type: this.state.type\r\n    }\r\n\r\n    API.createAnimal(animalData)\r\n      .then(res => {\r\n        console.log(res)\r\n        API.getAnimal()\r\n          .then(res => {\r\n            this.setState({\r\n              animals: res.data\r\n            })\r\n          })\r\n        // window.location.reload()\r\n      })\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n        <h3>Enter an animal in the database!</h3>\r\n        <form>\r\n          <input name='name' value={this.state.name} onChange={this.handleInputChange} type='text'></input>\r\n          <label htmlFor='name'>Name</label>\r\n          <input name='type' value={this.state.type} onChange={this.handleInputChange} type='text'></input>\r\n          <label htmlFor='type'>Type</label>\r\n          <br />\r\n          <br />\r\n          <button className='btn' type='submit' onClick={this.handleSubmit}>Enter</button>\r\n        </form>\r\n\r\n        <div>\r\n          <h3>The Zoo</h3>\r\n          <table>\r\n            <tbody>\r\n              <th>Name</th>\r\n              <th>Type</th>\r\n\r\n              {(this.state.animals.length) ?\r\n                this.state.animals.map((animal, i) => (\r\n                  <tr key={i}>\r\n                    <td>{animal.name}</td>\r\n                    <td>{animal.type}</td>\r\n                  </tr>\r\n\r\n                )) : \"No Animals\"\r\n              }\r\n\r\n            </tbody>\r\n\r\n          </table>\r\n\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}